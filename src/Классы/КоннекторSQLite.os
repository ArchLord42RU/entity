#Использовать asserts
#Использовать logos
#Использовать reflector
#Использовать sql
#Использовать strings

Перем Соединение;

Перем Лог;

Процедура ПриСозданииОбъекта()
	Соединение = Новый Соединение();
	Лог = Логирование.ПолучитьЛог("oscript.lib.entity.connector.sqlite");
КонецПроцедуры

Процедура Открыть(СтрокаСоединения, ПараметрыКоннектора) Экспорт
	Соединение.ТипСУБД = Соединение.ТипыСУБД.sqlite;
	Соединение.СтрокаСоединения = СтрокаСоединения;
	Соединение.Открыть();
КонецПроцедуры

Процедура Закрыть() Экспорт
	Соединение.Закрыть();
КонецПроцедуры

Функция Открыт() Экспорт
	Возврат Соединение.Открыто;
КонецФункции

Процедура НачатьТранзакцию() Экспорт
	Запрос = Новый Запрос();
	Запрос.УстановитьСоединение(Соединение);
	Запрос.Текст = "BEGIN TRANSACTION;";
	Запрос.ВыполнитьКоманду();
КонецПроцедуры

Процедура ЗафиксироватьТранзакцию() Экспорт
	Запрос = Новый Запрос();
	Запрос.УстановитьСоединение(Соединение);
	Запрос.Текст = "COMMIT;";
	Запрос.ВыполнитьКоманду();
КонецПроцедуры

Процедура ИнициализироватьТаблицу(ОбъектМодели) Экспорт
	
	КартаТипов = СоответствиеТиповМоделиИТиповКолонок();

	ИмяТаблицы = ОбъектМодели.ИмяТаблицы();
		
	ТекстЗапроса = "CREATE TABLE IF NOT EXISTS %1 (
	|%2
	|);";
	КолонкиТаблицы = ОбъектМодели.Колонки();
	Идентификатор = ОбъектМодели.Идентификатор();
	СтрокаОпределенийКолонок = "";
	Для Каждого Колонка Из КолонкиТаблицы Цикл
		
		СтрокаКолонка = "";
		СтрокаПервичныйКлюч = "";

		// Формирование строки-колонки
		СтрокаКолонка = Символы.Таб + Колонка.ИмяКолонки;
		Если Колонка.ТипКолонки = ТипыКолонок.Ссылка Тогда
			ОбъектМоделиСсылка = ОбъектМодели.МодельДанных().Получить(Колонка.ТипСсылки);
			ТипКолонки = КартаТипов.Получить(ОбъектМоделиСсылка.Идентификатор().ТипКолонки);

			СтрокаПервичныйКлюч = Символы.Таб + СтрШаблон(
				"FOREIGN KEY (%1) REFERENCES %2(%3),%4",
				Колонка.ИмяКолонки,
				ОбъектМоделиСсылка.ИмяТаблицы(),
				ОбъектМоделиСсылка.Идентификатор().ИмяКолонки,
				Символы.ПС
			);
		Иначе
			ТипКолонки = КартаТипов.Получить(Колонка.ТипКолонки);
		КонецЕсли;
		СтрокаКолонка = СтрокаКолонка + " " + ТипКолонки;
		Если Колонка.ИмяПоля = Идентификатор.ИмяПоля Тогда
			СтрокаКолонка = СтрокаКолонка + " PRIMARY KEY";
		КонецЕсли;
		Если Колонка.ГенерируемоеЗначение Тогда
			СтрокаКолонка = СтрокаКолонка + " AUTOINCREMENT";
		КонецЕсли;
		СтрокаКолонка = СтрокаКолонка + "," + Символы.ПС;
		
		СтрокаОпределенийКолонок = СтрокаОпределенийКолонок + СтрокаКолонка;
		
		Если ЗначениеЗаполнено(СтрокаПервичныйКлюч) Тогда
			СтрокаОпределенийКолонок = СтрокаОпределенийКолонок + СтрокаПервичныйКлюч;
		КонецЕсли;
	КонецЦикла;
	СтроковыеФункции.УдалитьПоследнийСимволВСтроке(СтрокаОпределенийКолонок, 2);

	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяТаблицы, СтрокаОпределенийКолонок);
	Лог.Отладка("Инициализация таблицы %1:%2%3", ИмяТаблицы, Символы.ПС, ТекстЗапроса);

	Запрос = Новый Запрос();
	Запрос.УстановитьСоединение(Соединение);
	Запрос.Текст = ТекстЗапроса;

	Запрос.ВыполнитьКоманду();
КонецПроцедуры

Процедура Сохранить(ОбъектМодели, Сущность) Экспорт
	
	ИмяТаблицы = ОбъектМодели.ИмяТаблицы();
	КолонкиТаблицы = ОбъектМодели.Колонки();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьСоединение(Соединение);
	
	ИменаКолонок = "";
	ЗначенияКолонок = "";
	
	Если КолонкиТаблицы.Количество() = 1 И ОбъектМодели.Идентификатор().ГенерируемоеЗначение Тогда
		ИменаКолонок = Символы.Таб + ОбъектМодели.Идентификатор().ИмяКолонки;
		ЗначенияКолонок = Символы.Таб + "null"; 
	Иначе
		Для Каждого ДанныеОКолонке Из КолонкиТаблицы Цикл
			ЗначениеПараметра = ОбъектМодели.ПолучитьПриведенноеЗначениеПоля(Сущность, ДанныеОКолонке.ИмяПоля);
			
			Если ДанныеОКолонке.ГенерируемоеЗначение И НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				// TODO: Поддержка чего-то кроме автоинкремента
				Продолжить;
			КонецЕсли;
			ИменаКолонок = ИменаКолонок + Символы.Таб + ДанныеОКолонке.ИмяКолонки + "," + Символы.ПС;
			ЗначенияКолонок = ЗначенияКолонок + Символы.Таб + "@" + ДанныеОКолонке.ИмяКолонки + "," + Символы.ПС;
			
			ЗначениеПараметра = ОбъектМодели.ПолучитьПриведенноеЗначениеПоля(Сущность, ДанныеОКолонке.ИмяПоля);
			Запрос.УстановитьПараметр(ДанныеОКолонке.ИмяКолонки, ЗначениеПараметра);
		КонецЦикла;

		СтроковыеФункции.УдалитьПоследнийСимволВСтроке(ИменаКолонок, 2);
		СтроковыеФункции.УдалитьПоследнийСимволВСтроке(ЗначенияКолонок, 2);
	КонецЕсли;
	
	ТекстЗапроса = "INSERT OR REPLACE INTO %1 (
	|%2
	|) VALUES (
	|%3
	|);";
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяТаблицы, ИменаКолонок, ЗначенияКолонок);
	Лог.Отладка("Сохранение сущности с типом %1:%2%3", ОбъектМодели.ТипСущности(), Символы.ПС, ТекстЗапроса);	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.ВыполнитьКоманду();
	
	Если ОбъектМодели.Идентификатор().ГенерируемоеЗначение Тогда
		ИДПоследнейДобавленнойЗаписи = Запрос.ИДПоследнейДобавленнойЗаписи();
		ОбъектМодели.УстановитьЗначениеКолонкиВПоле(
			Сущность,
			ОбъектМодели.Идентификатор().ИмяКолонки,
			ИДПоследнейДобавленнойЗаписи
		);
	КонецЕсли;

	// TODO: Для полей с автоинкрементом - получить значения из базы.
	// по факту - просто переинициализировать класс значениями полей из СУБД.
	// ЗаполнитьСущность(Сущность, ОбъектМодели);

КонецПроцедуры


Функция ПолучитьЗначенияКолонокСущности(ОбъектМодели, Знач Идентификатор) Экспорт
	
	Если ТипЗнч(Идентификатор) = Тип("Число") Тогда
		Идентификатор = Формат(Идентификатор, "ЧГ=");
	КонецЕсли;

	ТекстЗапроса = СтрШаблон(
		"SELECT * FROM %1 WHERE %2 = %3", 
		ОбъектМодели.ИмяТаблицы(),
		ОбъектМодели.Идентификатор().ИмяКолонки,
		Идентификатор
	);
	
	Лог.Отладка("Поиск сущности с ИД %1 в таблице %2:%3%4", Идентификатор, ОбъектМодели.ИмяТаблицы(), Символы.ПС, ТекстЗапроса);

	Запрос = Новый Запрос();
	Запрос.УстановитьСоединение(Соединение);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить();
	
	Ожидаем.Что(
		Результат, 
		СтрШаблон("Сущность с типом %1 и идентификатором %2 не найдена", ОбъектМодели.ТипСущности(), Идентификатор)
	).ИмеетДлину(1);
	
	ДанныеИзБазы = Результат[0];

	ЗначенияКолонок = Новый Соответствие;
	Для Каждого Колонка Из ОбъектМодели.Колонки() Цикл
		ЗначениеКолонки = ДанныеИзБазы[Колонка.ИмяКолонки];
		ЗначенияКолонок.Вставить(Колонка.ИмяКолонки, ЗначениеКолонки);
	КонецЦикла;
	
	Возврат ЗначенияКолонок;

КонецФункции

// TODO: Стоит вынести в сам менеджер?
Функция ВыполнитьЗапрос(ТекстЗапроса) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьСоединение(Соединение);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;

КонецФункции

Функция СоответствиеТиповМоделиИТиповКолонок()
	
	Карта = Новый Соответствие;
	Карта.Вставить(ТипыКолонок.Целое, "INTEGER");
	Карта.Вставить(ТипыКолонок.Дробное, "DECIMAL");
	Карта.Вставить(ТипыКолонок.Булево, "BOOLEAN");
	Карта.Вставить(ТипыКолонок.Строка, "TEXT");
	Карта.Вставить(ТипыКолонок.Дата, "DATE");
	Карта.Вставить(ТипыКолонок.Время, "TIME");
	Карта.Вставить(ТипыКолонок.ДатаВремя, "DATETIME");
	
	Возврат Карта;
	
КонецФункции
